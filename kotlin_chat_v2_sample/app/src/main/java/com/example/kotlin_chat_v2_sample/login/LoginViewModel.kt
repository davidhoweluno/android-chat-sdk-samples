package com.example.kotlin_chat_v2_sample.login

import android.content.Context
import android.util.Log
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.kotlin_chat_v2_sample.BuildConfig.USER_KEY
import com.kustomer.core.models.KusResult
import com.kustomer.ui.Kustomer
import kotlinx.coroutines.launch
import java.lang.ref.WeakReference

class LoginViewModel : ViewModel() {

    private val _navigateToOrderHistory = MutableLiveData<String?>()
    val navigateToOrderHistory
        get() = _navigateToOrderHistory

    private val _navigateToGuestScreen = MutableLiveData<Boolean?>()
    val navigateToGuestScreen
        get() = _navigateToGuestScreen

    private val _snackbarEvent = MutableLiveData<String?>()
    val snackbarEvent
        get() = _snackbarEvent

    fun logIn(email: String, context: WeakReference<Context>) {
        // Handle your app's login process as usual. Here, we'll assume that app login always succeeds and returns true
        // Once app login succeeds, you can continue to log the user in to Kustomer
        val loginIsValid = true

        if (loginIsValid) {
            onLoginSucceeded(email, context)
        }
    }

    // Normally, JWTs should be generated by your backend and fetched by your app. To test login
    // functionality, replace the jwt value with a valid token generated using your org's secret key.
    // For more information, see this project's README
    private fun onLoginSucceeded(email: String, context: WeakReference<Context>) {
        viewModelScope.launch {
            val sharedPrefs = context.get()?.getSharedPreferences("KUS_PREF", Context.MODE_PRIVATE)
            if (sharedPrefs?.getBoolean("kus_logged_in", false) != true) {
                Kustomer.getInstance().logIn(USER_KEY) {
                    if (it is KusResult.Success) {
                        Log.d("Login", "Login success")
                        showSnackbar("Login success")
                        sharedPrefs?.edit()?.putBoolean("kus_logged_in", true)?.apply()
                        _navigateToOrderHistory.value = email
                    } else {
                        Log.d("Login", "Login failed")
                        showSnackbar("Login failed")
                    }
                }
            } else {
                _navigateToOrderHistory.value = email
            }
        }
    }

    fun loginEventComplete() {
        _navigateToOrderHistory.value = null
    }

    fun continueAsGuest() {
        _navigateToGuestScreen.value = true
    }

    fun navigateToGuestScreenComplete() {
        _navigateToGuestScreen.value = null
    }

    private fun showSnackbar(message: String) {
        _snackbarEvent.value = message
    }

    fun snackbarComplete() {
        _snackbarEvent.value = null
    }
}

@Suppress("UNCHECKED_CAST")
class LoginViewModelFactory : ViewModelProvider.NewInstanceFactory() {
    override fun <T : ViewModel> create(modelClass: Class<T>) =
        (LoginViewModel() as T)
}
